# Database Configuration
# Set USE_SQLITE=true for SQLite, false for PostgreSQL
USE_SQLITE=true

# SQLite Configuration (when USE_SQLITE=true)
SQLITE_DB_PATH=chatsparty.db

# PostgreSQL Configuration (when USE_SQLITE=false)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=wisty

# Alternative: Use a complete database URL
# DATABASE_URL=sqlite+aiosqlite:///wisty.db
# DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/wisty

# AI Model Configuration
OLLAMA_MODEL=gemma3:4b

# ChatsParty Default Connection Configuration
# Enable/disable the default chatsparty connection for new users
CHATSPARTY_DEFAULT_ENABLED=true
# Default model to use for chatsparty platform connection
CHATSPARTY_DEFAULT_MODEL=gemini-2.5-flash
# Optional: API key for chatsparty platform (leave empty if no API key required)
CHATSPARTY_DEFAULT_API_KEY=
# Optional: Base URL for chatsparty platform API (leave empty for default)
CHATSPARTY_DEFAULT_BASE_URL=

# VM Provider Configuration
# Supported providers: docker, fly
VM_PROVIDER=docker

# Docker Provider Configuration (only needed if VM_PROVIDER=docker)
# Docker image name to use for containers
DOCKER_IMAGE=wisty-dev-capsule
# Docker mode: local (use local images only) or cloud (pull from registry if not local)
DOCKER_MODE=local

# Fly.io Provider Configuration (only needed if VM_PROVIDER=fly)
# Get your token from: fly auth token
FLY_TOKEN=your_fly_token_here
FLY_APP_NAME=wisty-workspace

# Authentication Configuration
SECRET_KEY=your-secret-key-change-this-in-production-make-it-32-chars-long
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Encryption Configuration
# Generate a secure encryption key using: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
ENCRYPTION_MASTER_KEY=your-encryption-master-key-here

# OAuth Configuration
# Get these from Google Cloud Console: https://console.cloud.google.com/
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Get these from GitHub Developer Settings: https://github.com/settings/developers
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Frontend URL (for CORS and OAuth redirects)
# Development: http://localhost:5173
# Production: https://your-domain.com
FRONTEND_URL=http://localhost:5173

# Backend URL (for OAuth callbacks)
# Development: http://localhost:8000
# Production: https://api.your-domain.com
BACKEND_URL=http://localhost:8000

# Authentication mode (set to true to disable traditional email/password auth)
SOCIAL_AUTH_ONLY=false




# Storage Provider Configuration Examples
# Copy this to your .env file and uncomment the provider you want to use

# ============================================
# LOCAL STORAGE (Default - for development)
# ============================================
STORAGE_PROVIDER=local
LOCAL_STORAGE_PATH=./storage/uploads
LOCAL_STORAGE_URL_BASE=http://localhost:8000/files/download

# ============================================
# CLOUDFLARE R2 (Recommended for production)
# Cost: ~$0.015/GB/month, no egress fees
# ============================================
# STORAGE_PROVIDER=cloudflare_r2
# R2_BUCKET_NAME=your-bucket-name
# R2_ENDPOINT_URL=https://your-account-id.r2.cloudflarestorage.com
# R2_ACCESS_KEY=your-r2-access-key
# R2_SECRET_KEY=your-r2-secret-key
# R2_PUBLIC_URL_BASE=https://your-custom-domain.com  # Optional, for public buckets

# ============================================
# AWS S3 (Most popular, higher cost)
# Cost: ~$0.023/GB/month + egress fees
# ============================================
# STORAGE_PROVIDER=aws_s3
# AWS_S3_BUCKET_NAME=your-s3-bucket
# AWS_S3_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_S3_PUBLIC_URL_BASE=https://your-bucket.s3.amazonaws.com  # Optional, for public buckets

# ============================================
# SETUP INSTRUCTIONS
# ============================================

# 1. CLOUDFLARE R2 SETUP (Cheapest option):
#    - Go to Cloudflare Dashboard > R2 Object Storage
#    - Create a bucket
#    - Go to "Manage R2 API tokens"
#    - Create API token with permissions for your bucket
#    - Set endpoint URL: https://[account-id].r2.cloudflarestorage.com
#    - Optional: Set up custom domain for public access

# 2. AWS S3 SETUP:
#    - Create S3 bucket in AWS Console
#    - Create IAM user with S3 permissions
#    - Generate access keys for the IAM user
#    - Set appropriate bucket policies if needed

# 3. LOCAL STORAGE SETUP:
#    - Just set the local path where files should be stored
#    - Make sure the application has write permissions to that directory