"""add user relationships to agents conversations and connections

Revision ID: 845b3fc1d3f7
Revises: 6c4579ea9b50
Create Date: 2025-06-17 23:54:27.712646

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '845b3fc1d3f7'
down_revision: Union[str, Sequence[str], None] = '6c4579ea9b50'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # SQLite doesn't support ALTER COLUMN to change nullability, so we'll use a different approach
    # Add columns as nullable first, then we'll work with constraints
    op.add_column('agents', sa.Column('user_id', sa.String(), nullable=True))
    op.add_column('connections', sa.Column('user_id', sa.String(), nullable=True))
    op.add_column('conversations', sa.Column('user_id', sa.String(), nullable=True))
    op.add_column('conversations', sa.Column('is_shared', sa.Boolean(), nullable=True))
    
    # Get database connection for data migration
    connection = op.get_bind()
    
    # Check if we have any users
    result = connection.execute(sa.text("SELECT COUNT(*) FROM users")).fetchone()
    if result[0] == 0:
        # Create a default user for migration
        import uuid
        default_user_id = str(uuid.uuid4())
        connection.execute(
            sa.text("INSERT INTO users (id, email, hashed_password, is_active, is_verified) VALUES (:id, :email, :password, :active, :verified)"),
            {
                'id': default_user_id,
                'email': 'migration@default.com',
                'password': 'migration_placeholder',
                'active': True,
                'verified': True
            }
        )
    else:
        # Get the first existing user
        result = connection.execute(sa.text("SELECT id FROM users LIMIT 1")).fetchone()
        default_user_id = result[0]
    
    # Update existing records to have the default user
    connection.execute(
        sa.text("UPDATE agents SET user_id = :user_id WHERE user_id IS NULL"),
        {'user_id': default_user_id}
    )
    connection.execute(
        sa.text("UPDATE connections SET user_id = :user_id WHERE user_id IS NULL"),
        {'user_id': default_user_id}
    )
    connection.execute(
        sa.text("UPDATE conversations SET user_id = :user_id WHERE user_id IS NULL"),
        {'user_id': default_user_id}
    )
    connection.execute(
        sa.text("UPDATE conversations SET is_shared = 0 WHERE is_shared IS NULL")
    )
    
    # For SQLite, we'll leave the columns nullable for now
    # The application code will enforce the NOT NULL constraint
    # Create foreign key constraints
    op.create_foreign_key(None, 'agents', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'connections', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'conversations', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.drop_column('conversations', 'is_shared')
    op.drop_column('conversations', 'user_id')
    op.drop_constraint(None, 'connections', type_='foreignkey')
    op.drop_column('connections', 'user_id')
    op.drop_constraint(None, 'agents', type_='foreignkey')
    op.drop_column('agents', 'user_id')
    # ### end Alembic commands ###
