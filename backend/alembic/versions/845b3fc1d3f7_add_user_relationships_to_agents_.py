"""add user relationships to agents conversations and connections

Revision ID: 845b3fc1d3f7
Revises: 6c4579ea9b50
Create Date: 2025-06-17 23:54:27.712646

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '845b3fc1d3f7'
down_revision: Union[str, Sequence[str], None] = '6c4579ea9b50'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # SQLite doesn't support ALTER COLUMN to change nullability, so we'll use a
    # different approach. Add columns as nullable first, then we'll work with constraints
    op.add_column('agents', sa.Column('user_id', sa.String(), nullable=True))
    op.add_column('connections', sa.Column(
        'user_id', sa.String(), nullable=True))
    op.add_column('conversations', sa.Column(
        'user_id', sa.String(), nullable=True))
    op.add_column('conversations', sa.Column(
        'is_shared', sa.Boolean(), nullable=True))

    # Get database connection for data migration
    connection = op.get_bind()

    # Check if we have any users
    result = connection.execute(
        sa.text("SELECT COUNT(*) FROM users")).fetchone()
    if result is None or result[0] == 0:
        # Create a default user for migration
        import uuid
        default_user_id = str(uuid.uuid4())
        connection.execute(
            sa.text(
                "INSERT INTO users (id, email, hashed_password, is_active, is_verified) "
                "VALUES (:id, :email, :password, :active, :verified)"
            ),
            {
                'id': default_user_id,
                'email': 'migration@default.com',
                'password': 'migration_placeholder',
                'active': True,
                'verified': True
            }
        )
    else:
        # Get the first existing user
        result = connection.execute(
            sa.text("SELECT id FROM users LIMIT 1")
        ).fetchone()
        if result is None:
            raise ValueError("No users found in database")
        default_user_id = result[0]

    # Update existing records to have the default user
    connection.execute(
        sa.text("UPDATE agents SET user_id = :user_id WHERE user_id IS NULL"),
        {'user_id': default_user_id}
    )
    connection.execute(
        sa.text("UPDATE connections SET user_id = :user_id WHERE user_id IS NULL"),
        {'user_id': default_user_id}
    )
    connection.execute(
        sa.text("UPDATE conversations SET user_id = :user_id WHERE user_id IS NULL"),
        {'user_id': default_user_id}
    )
    connection.execute(
        sa.text("UPDATE conversations SET is_shared = 0 WHERE is_shared IS NULL")
    )

    # Create foreign key constraints using batch operations for SQLite compatibility
    with op.batch_alter_table('agents', schema=None) as batch_op:
        batch_op.create_foreign_key(
            'fk_agents_user_id', 'users', ['user_id'], ['id']
        )

    with op.batch_alter_table('connections', schema=None) as batch_op:
        batch_op.create_foreign_key(
            'fk_connections_user_id', 'users', ['user_id'], ['id']
        )

    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.create_foreign_key(
            'fk_conversations_user_id', 'users', ['user_id'], ['id']
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_constraint(
            'fk_conversations_user_id', type_='foreignkey')
        batch_op.drop_column('is_shared')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('connections', schema=None) as batch_op:
        batch_op.drop_constraint('fk_connections_user_id', type_='foreignkey')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('agents', schema=None) as batch_op:
        batch_op.drop_constraint('fk_agents_user_id', type_='foreignkey')
        batch_op.drop_column('user_id')
    # ### end Alembic commands ###
